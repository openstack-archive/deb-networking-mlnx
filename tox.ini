[tox]
envlist = py33,py34,py27,pep8
minversion = 1.6
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
         PYTHONWARNINGS=default::DeprecationWarning
usedevelop = True
install_command = pip install -U  -r requirements.txt {opts} {packages}
deps = -r{toxinidir}/test-requirements.txt
whitelist_externals = sh
commands = python setup.py testr --slowest --testr-args='{posargs}'
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:hashtest]
# This is the same as default environment, but with a random PYTHONHASHSEED.
# You can also specify a specific hashseed (for test repeatability) as follows:
#   tox --hashseed 1235130571 -e hashtest
setenv = VIRTUAL_ENV={envdir}

[tox:jenkins]
sitepackages = True

[testenv:pep8]
commands =
  # If it is easier to add a check via a shell script, consider adding it in this file
  sh ./tools/misc-sanity-checks.sh
  flake8
  neutron-db-manage --subproject networking-mlnx --database-connection sqlite:// check_migration
whitelist_externals = sh

[testenv:i18n]
commands = python ./tools/check_i18n.py ./networking_mlnx ./tools/i18n_cfg.py

[testenv:cover]
commands =
  python -m networking_mlnx.openstack.common.lockutils python setup.py testr --coverage --testr-args='{posargs}'

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = python setup.py build_sphinx

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# H404 multi line docstring should start with a summary
# H405 multi line docstring summary not separated with an empty line
# N530 direct neutron imports not allowed
ignore = E125,E126,E128,E129,H404,H405,N530
show-source = true
builtins = _
exclude = .venv,.git,.tox,dist,doc,*lib/python*,*egg,build,tools,.ropeproject

[testenv:pylint]
deps =
  {[testenv]deps}
  pylint
commands =
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:networking_mlnx}

[hacking]
import_exceptions = networking_mlnx._i18n
local-check-factory = neutron_lib.hacking.checks.factory
